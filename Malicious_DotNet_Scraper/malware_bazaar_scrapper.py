#!/usr/bin/env python3

# Import necessary libraries
import requests
import json
import argparse
from jq import jq
import sys
import pyzipper

# Set up argument parser
parser = argparse.ArgumentParser(description='Download a malware sample from Malware Bazaar by abuse.ch')

# Add command-line arguments
parser.add_argument('-k', '--key', help='API KEY which is required to authenticate', required=True, )
parser.add_argument('-u', '--unzip', help='Unzip the downloaded file', required=False, default=False,)

# Parse arguments
args = parser.parse_args()

# Send POST request to retrieve tag info for ".net" malware samples
response = requests.post(
    'https://mb-api.abuse.ch/api/v1/', 
    data={  
        'query': 'get_taginfo',
        'tag': ''+'.net'+'',}, 
    timeout=15)

# Decode response to string
json_response = response.content.decode("utf-8", "ignore")

# Extract SHA256 hashes from the response
json_response = jq(".data[]." + 'sha256_hash').transform(text=json_response, text_output=True)
hashes = [hash.strip('"') for hash in json_response.split('\n')]


# Download and, if specified, unzip malware samples
for hash in hashes:
  ZIP_PASSWORD = b'infected'

  response = requests.post(
      'https://mb-api.abuse.ch/api/v1/', 
      data={'query': 'get_file','sha256_hash': hash,}, 
      timeout=15, 
      headers={ 'API-KEY': args.key }, 
      allow_redirects=True)
  
  # Check if file was not found
  if 'file_not_found' in response.text:
      print("Error: file not found")
  else:
      # Write response content to file
      open(hash+'.zip', 'wb').write(response.content)

      # If specified, unzip file
      if(args.unzip):  
          with pyzipper.AESZipFile(hash+".zip") as zf:
              zf.pwd = ZIP_PASSWORD
              my_secrets = zf.extractall(".")  
              print("Sample \""+hash+"\" downloaded and unpacked.")
      else:
          print("Sample \""+hash+"\" downloaded.")
